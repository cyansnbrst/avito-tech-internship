// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {
            "name": "Ekaterina Goncharova",
            "email": "yuuonx@mail.ru"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/auth": {
            "post": {
                "description": "Creates a new user if username doesn't exist or login if password matches.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Register or login a user",
                "parameters": [
                    {
                        "description": "input",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.AuthRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "succesful",
                        "schema": {
                            "$ref": "#/definitions/models.AuthResponse"
                        }
                    },
                    "400": {
                        "description": "bad request",
                        "schema": {
                            "$ref": "#/definitions/httphelpers.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "invalid credentials",
                        "schema": {
                            "$ref": "#/definitions/httphelpers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "internal server error",
                        "schema": {
                            "$ref": "#/definitions/httphelpers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/buy/{item}": {
            "get": {
                "security": [
                    {
                        "JWT": []
                    }
                ],
                "description": "Buy an item from the store",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "merch"
                ],
                "summary": "Buy item",
                "parameters": [
                    {
                        "type": "string",
                        "description": "name of the item to buy",
                        "name": "item",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "400": {
                        "description": "bad request",
                        "schema": {
                            "$ref": "#/definitions/httphelpers.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "authentication required",
                        "schema": {
                            "$ref": "#/definitions/httphelpers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "internal server error",
                        "schema": {
                            "$ref": "#/definitions/httphelpers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/info": {
            "get": {
                "security": [
                    {
                        "JWT": []
                    }
                ],
                "description": "Get user's balance and transactions history.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "merch"
                ],
                "summary": "Get user's info",
                "responses": {
                    "200": {
                        "description": "succesful",
                        "schema": {
                            "$ref": "#/definitions/models.InfoResponse"
                        }
                    },
                    "400": {
                        "description": "bad request",
                        "schema": {
                            "$ref": "#/definitions/httphelpers.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "authentication required",
                        "schema": {
                            "$ref": "#/definitions/httphelpers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "internal server error",
                        "schema": {
                            "$ref": "#/definitions/httphelpers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/sendCoin": {
            "post": {
                "security": [
                    {
                        "JWT": []
                    }
                ],
                "description": "Send coins to another user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "merch"
                ],
                "summary": "Send coins",
                "parameters": [
                    {
                        "description": "input",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.SendTransaction"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "400": {
                        "description": "bad request",
                        "schema": {
                            "$ref": "#/definitions/httphelpers.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "authentication required",
                        "schema": {
                            "$ref": "#/definitions/httphelpers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "internal server error",
                        "schema": {
                            "$ref": "#/definitions/httphelpers.ErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "httphelpers.ErrorResponse": {
            "type": "object",
            "properties": {
                "errors": {
                    "type": "string"
                }
            }
        },
        "models.AuthRequest": {
            "type": "object",
            "required": [
                "password",
                "username"
            ],
            "properties": {
                "password": {
                    "type": "string",
                    "maxLength": 20,
                    "minLength": 4
                },
                "username": {
                    "type": "string",
                    "maxLength": 20,
                    "minLength": 4
                }
            }
        },
        "models.AuthResponse": {
            "type": "object",
            "properties": {
                "token": {
                    "type": "string"
                }
            }
        },
        "models.InfoResponse": {
            "type": "object",
            "properties": {
                "coin_history": {
                    "$ref": "#/definitions/models.TransactionHistory"
                },
                "coins": {
                    "type": "integer"
                },
                "inventory": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.InventoryItem"
                    }
                }
            }
        },
        "models.InventoryItem": {
            "type": "object",
            "properties": {
                "quantity": {
                    "type": "integer"
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "models.ReceiveTransaction": {
            "type": "object",
            "properties": {
                "amount": {
                    "type": "integer"
                },
                "from_user": {
                    "type": "string"
                }
            }
        },
        "models.SendTransaction": {
            "type": "object",
            "required": [
                "amount",
                "to_user"
            ],
            "properties": {
                "amount": {
                    "type": "integer",
                    "minimum": 1
                },
                "to_user": {
                    "type": "string"
                }
            }
        },
        "models.TransactionHistory": {
            "type": "object",
            "properties": {
                "received": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.ReceiveTransaction"
                    }
                },
                "sent": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.SendTransaction"
                    }
                }
            }
        }
    },
    "securityDefinitions": {
        "JWT": {
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8080",
	BasePath:         "/api",
	Schemes:          []string{},
	Title:            "Merch Store Service API",
	Description:      "API for perform transactions in a merch store.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
