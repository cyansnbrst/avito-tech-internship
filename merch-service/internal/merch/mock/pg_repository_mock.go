// Code generated by MockGen. DO NOT EDIT.
// Source: internal/merch/pg_repository.go

// Package mock_merch is a generated GoMock package.
package mock_merch

import (
	context "context"
	models "cyansnbrst/merch-service/internal/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// BuyItem mocks base method.
func (m *MockRepository) BuyItem(ctx context.Context, userID int64, itemName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BuyItem", ctx, userID, itemName)
	ret0, _ := ret[0].(error)
	return ret0
}

// BuyItem indicates an expected call of BuyItem.
func (mr *MockRepositoryMockRecorder) BuyItem(ctx, userID, itemName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuyItem", reflect.TypeOf((*MockRepository)(nil).BuyItem), ctx, userID, itemName)
}

// GetCoinsAndInventory mocks base method.
func (m *MockRepository) GetCoinsAndInventory(ctx context.Context, userID int64) (*models.CoinsInventory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCoinsAndInventory", ctx, userID)
	ret0, _ := ret[0].(*models.CoinsInventory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCoinsAndInventory indicates an expected call of GetCoinsAndInventory.
func (mr *MockRepositoryMockRecorder) GetCoinsAndInventory(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCoinsAndInventory", reflect.TypeOf((*MockRepository)(nil).GetCoinsAndInventory), ctx, userID)
}

// GetTransactionHistory mocks base method.
func (m *MockRepository) GetTransactionHistory(ctx context.Context, userID int64) (*models.TransactionHistory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransactionHistory", ctx, userID)
	ret0, _ := ret[0].(*models.TransactionHistory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransactionHistory indicates an expected call of GetTransactionHistory.
func (mr *MockRepositoryMockRecorder) GetTransactionHistory(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransactionHistory", reflect.TypeOf((*MockRepository)(nil).GetTransactionHistory), ctx, userID)
}

// GetUserIDByUsername mocks base method.
func (m *MockRepository) GetUserIDByUsername(ctx context.Context, username string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserIDByUsername", ctx, username)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserIDByUsername indicates an expected call of GetUserIDByUsername.
func (mr *MockRepositoryMockRecorder) GetUserIDByUsername(ctx, username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserIDByUsername", reflect.TypeOf((*MockRepository)(nil).GetUserIDByUsername), ctx, username)
}

// SendCoins mocks base method.
func (m *MockRepository) SendCoins(ctx context.Context, fromUser int64, toUser string, amount int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendCoins", ctx, fromUser, toUser, amount)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendCoins indicates an expected call of SendCoins.
func (mr *MockRepositoryMockRecorder) SendCoins(ctx, fromUser, toUser, amount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendCoins", reflect.TypeOf((*MockRepository)(nil).SendCoins), ctx, fromUser, toUser, amount)
}
