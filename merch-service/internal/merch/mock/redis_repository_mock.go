// Code generated by MockGen. DO NOT EDIT.
// Source: internal/merch/redis_repository.go

// Package mock_merch is a generated GoMock package.
package mock_merch

import (
	context "context"
	models "cyansnbrst/merch-service/internal/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockRedisRepository is a mock of RedisRepository interface.
type MockRedisRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRedisRepositoryMockRecorder
}

// MockRedisRepositoryMockRecorder is the mock recorder for MockRedisRepository.
type MockRedisRepositoryMockRecorder struct {
	mock *MockRedisRepository
}

// NewMockRedisRepository creates a new mock instance.
func NewMockRedisRepository(ctrl *gomock.Controller) *MockRedisRepository {
	mock := &MockRedisRepository{ctrl: ctrl}
	mock.recorder = &MockRedisRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRedisRepository) EXPECT() *MockRedisRepositoryMockRecorder {
	return m.recorder
}

// DeleteInfo mocks base method.
func (m *MockRedisRepository) DeleteInfo(ctx context.Context, key string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteInfo", ctx, key)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteInfo indicates an expected call of DeleteInfo.
func (mr *MockRedisRepositoryMockRecorder) DeleteInfo(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteInfo", reflect.TypeOf((*MockRedisRepository)(nil).DeleteInfo), ctx, key)
}

// GetInfo mocks base method.
func (m *MockRedisRepository) GetInfo(ctx context.Context, key string) (*models.InfoResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInfo", ctx, key)
	ret0, _ := ret[0].(*models.InfoResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInfo indicates an expected call of GetInfo.
func (mr *MockRedisRepositoryMockRecorder) GetInfo(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInfo", reflect.TypeOf((*MockRedisRepository)(nil).GetInfo), ctx, key)
}

// SetInfo mocks base method.
func (m *MockRedisRepository) SetInfo(ctx context.Context, key string, info *models.InfoResponse) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetInfo", ctx, key, info)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetInfo indicates an expected call of SetInfo.
func (mr *MockRedisRepositoryMockRecorder) SetInfo(ctx, key, info interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetInfo", reflect.TypeOf((*MockRedisRepository)(nil).SetInfo), ctx, key, info)
}
